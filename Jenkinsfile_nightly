#!groovy
properties([
  pipelineTriggers([cron('15 14 * * 1-5')]),
  parameters([
    choice(choices: ['chrome', 'firefox', 'msedge'], name: 'Browser'),
    choice(choices: ['ithc', 'test', 'stg', 'demo'], name: 'EnvironmentChoice'),
    booleanParam(name: 'runExpenses', defaultValue: false, description: 'Include Expenses tests'),
    booleanParam(name: 'runFeatures', defaultValue: false, description: 'Include Features tests'),
    booleanParam(name: 'runJurorTransformation', defaultValue: true, description: 'Include JurorTransformation tests'),
    booleanParam(name: 'runJurorTransformationMulti', defaultValue: true, description: 'Include JurorTransformationMulti tests'),
    booleanParam(name: 'runJurorTransformationWIP', defaultValue: true, description: 'Include JurorTransformationWIP tests'),
    booleanParam(name: 'runRegression', defaultValue: false, description: 'Include Regression tests'),
    booleanParam(name: 'runRegressionSingle', defaultValue: false, description: 'Include RegressionSingle tests'),
    booleanParam(name: 'runRegressionWelsh', defaultValue: false, description: 'Include RegressionWelsh tests'),
    booleanParam(name: 'runShakedown', defaultValue: false, description: 'Include Shakedown tests'),
    booleanParam(name: 'masterOverride', defaultValue: false, description: 'Select this if you need master to run other than MOD tests')
  ])
])

@Library("Infrastructure") 

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "juror"
def component = "automation-tests"

def SUITES_BY_BRANCH = [
        'master'     : ['JurorTransformation','JurorTransformationMulti','JurorTransformationWIP','Shakedown'],
        'nightly-dev': ['Expenses','Features','Regression','RegressionSingle','RegressionWelsh','Shakedown']
        // 'demo': [] // example: turn off tests in environment, also uncomment line 144
]

def ENV_BY_BRANCH = [
        'master'     : 'ithc',
        'nightly-dev': 'demo'
]

def applyBranchDefaults = { String branch ->
  [
          'Expenses','Features',
          'JurorTransformation','JurorTransformationMulti','JurorTransformationWIP',
          'Regression','RegressionSingle','RegressionWelsh',
          'Shakedown'
  ].each { suite ->
    env."run${suite}" = "false"
  }

  (SUITES_BY_BRANCH[branch] ?: []).each { suite ->
    env."run${suite}" = "true"
  }

  if (ENV_BY_BRANCH.containsKey(branch)) {
    env.envName = ENV_BY_BRANCH[branch]
  }
}

def secrets = [
  'juror-stg': [
    secret('api-POSTGRES-USER', 'DATABASE_STG_USERNAME'),
    secret('api-POSTGRES-PASS', 'DATABASE_STG_PASSWORD'),
  ],
  'juror-test': [
    secret('api-POSTGRES-USER', 'DATABASE_TEST_USERNAME'),
    secret('api-POSTGRES-PASS', 'DATABASE_TEST_PASSWORD'),
  ],
  'juror-demo': [
    secret('api-POSTGRES-USER', 'DATABASE_DEMO_USERNAME'),
    secret('api-POSTGRES-PASS', 'DATABASE_DEMO_PASSWORD'),
  ],
  'juror-ithc': [
    secret('api-POSTGRES-USER', 'DATABASE_ITHC_USERNAME'),
    secret('api-POSTGRES-PASS', 'DATABASE_ITHC_PASSWORD'),
  ],
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

def isTimerBuild() {
  def causes = currentBuild.rawBuild?.getCauses() ?: []
  causes.any { it.class.simpleName == 'TimerTriggerCause' }
}

def setBuildName() {
  def suffixes = [
    "RunExpenses"                 : ",ex",
    "RunFeatures"                 : ",fe",
    "RunJurorTransformationMulti" : ",jM",
    "RunJurorTransformation"      : ",jT",
    "RunJurorTransformationWIP"   : ",jW",
    "RunRegression"               : ",re",
    "RunRegressionSingle"         : ",rS",
    "RunRegressionWelsh"          : ",rW",
    "RunShakedown"                : ",sh"
  ]

  def nameBuilder = "#${BUILD_NUMBER} - ${env.envName}"
  suffixes.each { key, value ->
    if (env."${key}" == "true") {
      nameBuilder += value
    }
  }
  nameBuilder += ",sm"
  currentBuild.displayName = nameBuilder
}

withNightlyPipeline(type, product, component, 600) {
  loadVaultSecrets(secrets)
  enableFullFunctionalTest(600)
  enableSlackNotifications('#juror-build-notices')

  env.envName = params.EnvironmentChoice
  env.envDriver = params.Browser
  env.runExpenses = params.runExpenses
  env.runFeatures = params.runFeatures
  env.runJurorTransformation = params.runJurorTransformation
  env.runJurorTransformationMulti = params.runJurorTransformationMulti
  env.runJurorTransformationWIP = params.runJurorTransformationWIP
  env.runRegression = params.runRegression
  env.runRegressionSingle = params.runRegressionSingle
  env.runRegressionWelsh = params.runRegressionWelsh
  env.runShakedown = params.runShakedown

  if (env.BRANCH_NAME == 'master') {
    if (isTimerBuild() && !params.masterOverride) {
      applyBranchDefaults('master')
    }
  } else if (env.BRANCH_NAME == 'nightly-dev') {
    if (isTimerBuild()) {
      applyBranchDefaults('nightly-dev')
    }
  }

 //  if (env.envName == 'demo') { applyBranchDefaults('demo') } // turn off tests in environment

  setBuildName()
  afterAlways('fullFunctionalTest') {

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_Expenses/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber Expenses Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_Features/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber Features Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_JurorTransformation/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber JurorTransformation Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_JurorTransformationMulti/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber JurorTransformationMulti Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_JurorTransformationWIP/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber JurorTransformationWIP Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_NewSchemaConverted/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber NewSchemaConverted Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_Regression/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber Regression Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_RegressionSingle/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber RegressionSingle Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_RegressionWelsh/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber RegressionWelsh Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_Shakedown/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber Shakedown Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "target/TestRunner_SmokeTest/",
      reportFiles          : "cucumber.html",
      reportName           : "Cucumber Smoke Test Report"
    ]

    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'selenium.log'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'target/**/*.json'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'target/**/*.html'
  }
}
